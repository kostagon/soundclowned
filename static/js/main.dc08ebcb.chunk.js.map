{"version":3,"sources":["assets/svgs/happy_music.svg","assets/svgs/undraw_happy_music_g6wc.svg","assets/svgs/nature.svg","assets/svgs/undraw_nature_m5ll.svg","assets/svgs/astronaut.svg","assets/svgs/undraw_relaunch_day_902d.svg","cmps/HeaderCmp.js","cmps/TrackPreview.js","services/scService.js","store/actions/trackActions.js","services/storageService.js","cmps/SearchCmp.js","store/actions/searchActions.js","store/actions/utilActions.js","cmps/RecentSearches.js","cmps/PlayerCmp.js","cmps/FooterCmp.js","cmps/SvgCmp.js","App.js","serviceWorker.js","store/reducers/trackReducer.js","store/reducers/searchReducer.js","store/reducers/utilReducer.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","HeaderCmp","className","icon","faSoundcloud","TrackPreview","track","onTrackSelect","previewStyle","onClick","title","genre","artwork_url","src","alt","getTracks","getNextTracks","searchStr","a","SC","get","q","limit","linked_partitioning","console","log","url","axios","then","res","data","initialize","client_id","process","dispatch","getState","tracksPrm","scService","nextTracksUrl","tracks","type","catch","err","set","key","val","sessionStorage","setItem","JSON","stringify","parse","getItem","connect","state","util","setSelectedTrack","updateSearches","searches","search","includes","length","slice","unshift","storageService","setPreviewStyle","localStorage","props","inputEl","useRef","onPreviewChange","searchResultsClass","onSubmit","ev","preventDefault","current","value","placeholder","ref","autoComplete","faSearch","map","id","faForward","faList","faImages","PlayerCmp","permalink_url","volume","width","height","FooterCmp","imgs","astronaut","happy_music","happy_music_2","relaunch_day","nature","nature_2","SvgCmp","rndIdx","max","rnd","Math","floor","random","rndNum","imgSrc","selectedTrack","Boolean","window","location","hostname","match","initState","trackReducer","action","collection","next_href","searchReducer","utilReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dc08ebcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/happy_music.fb85f719.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_happy_music_g6wc.87aeb819.svg\";","module.exports = __webpack_public_path__ + \"static/media/nature.22b08523.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_nature_m5ll.009bc82e.svg\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.23ee41ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_relaunch_day_902d.b76746e9.svg\";","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSoundcloud } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst HeaderCmp = () => {\r\n    return (\r\n        <header className=\"flex align-center strong\">\r\n            <h2 className=\"logo\">\r\n                <FontAwesomeIcon icon={faSoundcloud} />\r\n            </h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default HeaderCmp\r\n","import React from 'react';\r\n\r\nconst TrackPreview = ({ track, onTrackSelect, previewStyle }) => {\r\n    return (\r\n        previewStyle === 'list' ?\r\n            <div className=\"track-preview-list-container\" onClick={() => { onTrackSelect(track) }}>\r\n                <span className=\"preview-title align-self-center\">\r\n                    {track.title} - {track.genre}\r\n                </span>\r\n            </div> :\r\n            <div className=\"track-preview-tile-container\" onClick={() => { onTrackSelect(track) }}>\r\n                <p className=\"overflow-hidden line-clamp\">{track.title}</p>\r\n                {track.artwork_url ?\r\n                    <img className=\"justify-self-end align-self-center\" src={track.artwork_url} alt=\"artwork\" /> :\r\n                    <span className=\"strong align-self-center justify-self-end\">No image</span>\r\n                }\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default TrackPreview;","import SC from 'soundcloud';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    getTracks,\r\n    getNextTracks\r\n}\r\n\r\nSC.initialize({\r\n    client_id: process.env.REACT_APP_API_KEY_SC\r\n});\r\n\r\nasync function getTracks(searchStr) {\r\n    try {\r\n        return await SC.get('/tracks', {\r\n            q: searchStr,\r\n            limit: 6,\r\n            linked_partitioning: 1\r\n        })\r\n    } catch (err) {\r\n        console.log('There was an error fetching data, error:', err)\r\n    }\r\n}\r\n\r\nasync function getNextTracks(url) {\r\n    if (url) {\r\n        try {\r\n            return await axios.get(url).then(res => res.data)\r\n        } catch (e) {\r\n            console.log('Error fetching data (getNextTracks). Error:', e);\r\n        }\r\n    } else return 'No more tracks to show'\r\n}\r\n","import scService from '../../services/scService';\r\n\r\nexport const getTracks = (searchStr) => {\r\n    return (dispatch, getState) => {\r\n        let tracksPrm;\r\n        if (searchStr) {\r\n            // New Query\r\n            tracksPrm = scService.getTracks(searchStr)\r\n        } else {\r\n            // Clicked on the 'Next' button\r\n            let url = getState().track.nextTracksUrl;\r\n            tracksPrm = scService.getNextTracks(url)\r\n        }\r\n        tracksPrm.then(tracks => {\r\n            dispatch({ type: 'SET_TRACKS', tracks })\r\n        }).catch(err => {\r\n            console.log('There was an error fetching data. Error:', err)\r\n        })\r\n    }\r\n}\r\n\r\nexport const setSelectedTrack = track => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: 'SET_SELECTED_TRACK', track })\r\n    }\r\n}\r\n","function set(key, val) {\r\n    sessionStorage.setItem(key, JSON.stringify(val))\r\n    return val;\r\n}\r\n\r\nfunction get(key) {\r\n    return JSON.parse(sessionStorage.getItem(key));\r\n}\r\n\r\nexport default {\r\n    set,\r\n    get\r\n}","import React, { useRef } from 'react';\r\nimport TrackPreview from './TrackPreview';\r\nimport { connect } from 'react-redux';\r\nimport { getTracks, setSelectedTrack } from '../store/actions/trackActions';\r\nimport { updateSearches } from '../store/actions/searchActions';\r\nimport { setPreviewStyle } from '../store/actions/utilActions';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faForward, faList, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { faImages } from '@fortawesome/free-regular-svg-icons';\r\n\r\nconst SearchCmp = (props) => {\r\n    const inputEl = useRef(null);\r\n    const { tracks } = props;\r\n\r\n    const handleSubmit = ev => {\r\n        ev.preventDefault();\r\n        let searchStr = inputEl.current.value;\r\n        if (searchStr.length >= 3) {\r\n            props.updateSearches(searchStr);\r\n            props.getTracks(searchStr);\r\n            inputEl.current.value = '';\r\n        }\r\n    }\r\n\r\n    const onGetNextTracks = () => {\r\n        props.getTracks();\r\n    }\r\n\r\n    const onTrackSelect = track => {\r\n        props.setSelectedTrack(track);\r\n    }\r\n\r\n    const onPreviewChange = previewStyle => {\r\n        if (previewStyle !== props.previewStyle) props.setPreviewStyle(previewStyle)\r\n    }\r\n\r\n    const searchResultsClass = `search-results-${props.previewStyle}`;\r\n\r\n    return (\r\n        <section className=\"search-cmp-container justify-self-center\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" placeholder=\"Search SoundCloud\" ref={inputEl} autoComplete=\"none\" />\r\n                <button><FontAwesomeIcon icon={faSearch} /></button>\r\n            </form>\r\n            {tracks && tracks.length ? (\r\n                <section className={searchResultsClass}>\r\n                    {tracks.map(track => {\r\n                        return <TrackPreview track={track} onTrackSelect={onTrackSelect} previewStyle={props.previewStyle} key={track.id} />\r\n                    })}\r\n                    <div className=\"results-options\">\r\n                        <FontAwesomeIcon icon={faForward} onClick={onGetNextTracks} />\r\n                        <div className=\"listing-options\">\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faList} onClick={() => {\r\n                                    onPreviewChange('list')\r\n                                }} />\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faImages} onClick={() => {\r\n                                    onPreviewChange('tile')\r\n                                }} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>) : <section className=\"search-results justify-self-center\">\r\n                    <span>Your tracks will appear here</span>\r\n                </section>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tracks: state.track.tracks,\r\n        previewStyle: state.util.previewStyle\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getTracks: (searchStr) => dispatch(getTracks(searchStr)),\r\n        setSelectedTrack: (track) => dispatch(setSelectedTrack(track)),\r\n        updateSearches: (searchStr) => dispatch(updateSearches(searchStr)),\r\n        setPreviewStyle: (previewStyle) => dispatch(setPreviewStyle(previewStyle))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchCmp)","import storageService from \"../../services/storageService\";\r\n\r\nexport const loadSearches = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: 'GET_SEARCHES' })\r\n    }\r\n}\r\n\r\nexport const setSearches = () => {\r\n    return (dispatch, getState) => {\r\n        const searches = storageService.get('recent-searches');\r\n        dispatch({ type: 'SET_SEARCHES', searches })\r\n    }\r\n}\r\n\r\nexport const updateSearches = searchStr => {\r\n    return (dispatch, getState) => {\r\n        let { searches } = getState().search;\r\n        console.log(searches);\r\n        if (!searches.includes(searchStr)) {\r\n            if (searches.length >= 5) {\r\n                searches = searches.slice(0, 4);\r\n            }\r\n            searches.unshift(searchStr);\r\n            storageService.set('recent-searches', searches);\r\n            dispatch({ type: 'SET_SEARCHES', searches });\r\n        }\r\n    }\r\n}","export const setPreviewStyle = (previewStyle) => {\r\n    localStorage.setItem('preview-style', previewStyle)\r\n    return {\r\n        type: 'SET_PREVIEW_STYLE',\r\n        previewStyle\r\n    }\r\n}\r\n\r\nexport const getPreviewStyle = () => {\r\n    return {\r\n        type: 'GET_PREVIEW_STYLE'\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getTracks } from '../store/actions/trackActions';\r\n\r\nconst RecentSearches = (props) => {\r\n    const { searches, getTracks } = props;\r\n\r\n    return (\r\n        <section className=\"recent-searches-container\">\r\n            <ul className=\"clean-list\">\r\n                <li>Recent Searches:</li>\r\n                {searches.map(searchStr => {\r\n                    return <li className=\"list-link\" key={searchStr} onClick={() => { getTracks(searchStr) }}>{searchStr}</li>\r\n                })}\r\n            </ul>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searches: state.search.searches\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getTracks: (searchStr) => dispatch(getTracks(searchStr))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentSearches)\r\n","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\n\r\n\r\nconst PlayerCmp = (props) => {\r\n    let { track } = props;\r\n    return (\r\n        <section className=\"player-cmp-container\">\r\n            <div className=\"track-details\">\r\n                Genre: {track.genre}<br />\r\n            </div>\r\n            <div className=\"player-container\">\r\n                <ReactPlayer url={track.permalink_url} volume={null} width=\"100%\" height=\"unset\" />\r\n            </div>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PlayerCmp","import React from 'react';\r\n\r\nconst FooterCmp = () => {\r\n    return (\r\n        <footer>\r\n            <h4>Kosta Goncharov</h4>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default FooterCmp\r\n","import React from 'react';\r\n\r\nimport happy_music from '../assets/svgs/happy_music.svg';\r\nimport happy_music_2 from '../assets/svgs/undraw_happy_music_g6wc.svg';\r\nimport nature from '../assets/svgs/nature.svg';\r\nimport nature_2 from '../assets/svgs/undraw_nature_m5ll.svg';\r\nimport astronaut from '../assets/svgs/astronaut.svg';\r\nimport relaunch_day from '../assets/svgs/undraw_relaunch_day_902d.svg';\r\n\r\nconst imgs = [astronaut, happy_music, happy_music_2, relaunch_day, nature, nature_2];\r\n\r\nfunction SvgCmp() {\r\n    const rndNum = (max) => {\r\n        let rnd = Math.floor((Math.random(1, max)) * 10)\r\n        if (rnd >= max) rnd = max;\r\n        return rnd;\r\n    }\r\n    let rndIdx = rndNum(imgs.length - 1);\r\n    let imgSrc = imgs[rndIdx]\r\n\r\n    return (\r\n        <div className=\"svg-container align-self-end justify-self-center\">\r\n            <img src={imgSrc} alt=\"for the horde\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SvgCmp\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport HeaderCmp from './cmps/HeaderCmp';\r\nimport SearchCmp from './cmps/SearchCmp';\r\nimport RecentSearches from './cmps/RecentSearches';\r\nimport PlayerCmp from './cmps/PlayerCmp';\r\nimport FooterCmp from './cmps/FooterCmp.js';\r\nimport SvgCmp from './cmps/SvgCmp';\r\n\r\nconst App = props => {\r\n  const { selectedTrack, searches } = props;\r\n  return (\r\n    <div className=\"App main-layout\">\r\n      <HeaderCmp />\r\n      <SearchCmp />\r\n      {selectedTrack &&\r\n        <PlayerCmp track={selectedTrack} />\r\n      }\r\n      <SvgCmp />\r\n      {searches.length > 0 &&\r\n        <RecentSearches />\r\n      }\r\n      <FooterCmp />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedTrack: state.track.selectedTrack,\r\n    searches: state.search.searches\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initState = {\r\n    tracks: [],\r\n    selectedTrack: null,\r\n    nextTracksUrl: ''\r\n}\r\n\r\nconst trackReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_TRACKS':\r\n            const { collection } = action.tracks;\r\n            let next_href = action.tracks.next_href;\r\n            return {\r\n                ...state,\r\n                tracks: collection,\r\n                nextTracksUrl: next_href\r\n            }\r\n        case 'SET_SELECTED_TRACK':\r\n            const { track } = action;\r\n            return {\r\n                ...state,\r\n                selectedTrack: track\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default trackReducer;","let searchesFromStorage = sessionStorage['recent-searches'] ?\r\n    JSON.parse(sessionStorage.getItem('recent-searches')) :\r\n    ['Pink Floyd', 'Wish you were here', 'A$AP Rocky - Pharsyde (Ft. Joe Fox)'];\r\n\r\nconst initState = {\r\n    searches: searchesFromStorage\r\n}\r\n\r\nconst searchReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_SEARCHES':\r\n            return {\r\n                searches: [...action.searches]\r\n            }\r\n        case 'GET_SEARCHES':\r\n            return state.searches;\r\n        case 'UPDATE_SEARCHES':\r\n            return {\r\n                ...state,\r\n                searches: action.searches\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default searchReducer;","const initState = {\r\n    previewStyle: localStorage.getItem('preview-style') ? localStorage.getItem('preview-style') : 'list'\r\n}\r\n\r\nconst utilReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_PREVIEW_STYLE':\r\n            return state.previewStyle;\r\n        case 'SET_PREVIEW_STYLE':\r\n            return {\r\n                ...state,\r\n                previewStyle: action.previewStyle\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default utilReducer;","import trackReducer from './trackReducer'\r\nimport searchReducer from './searchReducer'\r\nimport utilReducer from './utilReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n  track: trackReducer,\r\n  search: searchReducer,\r\n  util: utilReducer\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/_global.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './store/reducers/rootReducer';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}